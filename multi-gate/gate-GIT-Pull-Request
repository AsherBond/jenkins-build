#!/bin/bash
set -x
set -e
set -u

# check that we gate only on master and things that end in rc
if [[ ${GIT_BRANCH} == "master" ]] || [[ ${GIT_BRANCH} == *rc ]]; then
  curl -s -K ~/.rcbjenkins-git-creds ${GIT_COMMENT_URL} -X 'POST' -d '{"body": "Running GATE test(s): '${BUILD_URL}'console"}' || :
else 
  curl -s -K ~/.rcbjenkins-git-creds ${GIT_COMMENT_URL} -X 'POST' -d '{"body": "Gating is only enabled on master and rc branches."}' || :
  exit 1;
fi

GIT_PATCH_URL=${GIT_PATCH_URL:-noop}
TARGET_DIR=$(echo ${GIT_MASTER_URL} | sed 's/https:\/\/github.com\///g')

# cleanup the old chef-cookbooks tarball from the last run
rm -f chef-cookbooks.tgz
rm -f pr.patch

if [[ ! -d ${TARGET_DIR} ]]; then
  git clone ${GIT_MASTER_URL} ${TARGET_DIR}
fi

# setup the git repo
pushd ${TARGET_DIR}
git fetch origin
git checkout ${GIT_BRANCH}
git clean -ffdx
git pull origin ${GIT_BRANCH}
git submodule init
git submodule sync
git submodule update
popd

# if we have a PATCH, apply it
if [[ ${GIT_PATCH_URL} != "noop" ]]; then
  curl -s ${GIT_PATCH_URL} > pr.patch
  PATCH_PWD=$(pwd)
  pushd ${TARGET_DIR}/cookbooks/${GIT_REPO}
  if ! ( cat ${PATCH_PWD}/pr.patch | git apply ); then
    echo "Unable to merge proposed patch: ${GIT_PATCH_URL}"
    curl -s -K ~/.rcbjenkins-git-creds ${GIT_COMMENT_URL} -X 'POST'  -d '{"body": "Gate Failed - The patch '${GIT_PATCH_URL}' could not be applied to '${GIT_BRANCH}' of '${GIT_MASTER_URL}'.  Please see '${BUILD_URL}'consoleFull for more details."}'
    exit 1
  fi
  popd
fi

# tar everything up
pushd ${TARGET_DIR}
tar zcf ../../chef-cookbooks.tgz -C .. --exclude=.git --exclude=.gitignore chef-cookbooks
git clean -ffdx
git submodule foreach "git clean -ffdx"
popd

# clean up the submodule that we applied the PATCH to
if [[ ${GIT_PATCH_URL} != "noop" ]]; then
  pushd ${TARGET_DIR}/cookbooks/${GIT_REPO}
  git reset --hard HEAD
  popd
fi
