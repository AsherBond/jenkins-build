#!/bin/bash

# force a local default so this can be run on command line
JENKINS_BUILD_DIR=${JENKINS_BUILD_DIR-.}
GIT_BRANCH=${GIT_BRANCH-master}
GIT_CLONE_URL=${GIT_CLONE_URL-git://github.com/rcbops/chef-cookbooks.git}
DIST_NAME=${DIST_NAME-chef-cookbooks}
DIST_DIRECTORY=${DIST_DIRECTORY-tmp}

# Cleanup
rm -rf ./${DIST_DIRECTORY}
rm chef-cookbooks-*.tgz

# Clone the upstream repo
if ! ( git clone ${GIT_CLONE_URL} ./${DIST_DIRECTORY} ); then
    echo "Unable to clone git repo: ${GIT_CLONE_URL}"
    exit 1
fi

# Change directory to clone
cd ./${DIST_DIRECTORY}

# Change to branch
if ! ( git checkout ${GIT_BRANCH} ); then
  echo "Unable to checkout branch: ${GIT_BRANCH}"
  exit 1
fi

# Find the latest tag if no release is specified
RELEASE=${RELEASE-$(git describe --abbrev=0 --tags)}

# Change to tag
if ! ( git checkout ${RELEASE} ); then
  echo "Unable to checkout branch: ${RELEASE}"
  exit 1
fi

# Pull in submodules
if ! ( git submodule init ); then
  echo "Unable to init submodules"
  exit 1
fi

if ! ( git submodule update ); then
  echo "Unable to update submodules"
  exit 1
fi

# Remove .git files/directories
find . -name ".git*" -exec rm -rf {} \;

# Back out of tmp
cd ..

# Tar up the archive
DIST_FILENAME="${DIST_NAME}-${RELEASE}.tgz"
tar zcv -s "/${DIST_DIRECTORY}/${DIST_NAME}-${RELEASE}/" -f ${DIST_FILENAME} ${DIST_DIRECTORY}

# Upload

# Update Manifest
${JENKINS_BUILD_DIR}/scripts/manifest.py CURRENT.manifest ${RELEASE} "http://foo/${DIST_FILENAME}"
